#pragma once
#include "CoreMinimal.h"
#include "E_BTL_STATE_DEBUG.generated.h"

UENUM(BlueprintType)
enum class E_BTL_STATE_DEBUG : uint8 {
    E_BTL_STAT_DEBUG,
    E_BTL_STAT_DEBUG_PROVOKE100,
    E_BTL_STAT_DAM0_ENEMY,
    E_BTL_STAT_DAM0_PLAYER,
    E_BTL_STAT_DEBUG_NOCHANGE,
    E_BTL_STAT_DAMAGE99999,
    E_BTL_STAT_SKILLDEBUG,
    E_BTL_STAT_NOT_BST_TUTORIAL,
    E_BTL_STAT_DEBUG_PC_MODE,
    E_BTL_STAT_DEBUGLOG_ON,
    E_BTL_STAT_NO_DEATH,
    E_BTL_STAT_PARTNER_ACT100,
    E_BTL_STAT_CYCLELOG_ON,
    E_BTL_STAT_BUSTUP_ON,
    E_BTL_STAT_DEBUG_NO_COST,
    E_BTL_STAT_DEBUG_SKIP_RESULT,
    E_BTL_STAT_DEBUG_WAIT_DEBUG_MENU,
    E_BTL_STAT_DEBUG_OPEN_DEBUG_MENU,
    E_BTL_STAT_DEBUG_HIT_E,
    E_BTL_STAT_DEBUG_HIT_P,
    E_BTL_STAT_DEBUG_CHANGE_UNIT,
    E_BTL_STAT_DEBUG_TALK_BEGLIFE,
    E_BTL_STAT_DEBUG_ESCAPE_OK,
    E_BTL_STAT_DEBUG_ESCAPE_NG,
    E_BTL_STAT_DEBUG_CRITICAL_E,
    E_BTL_STAT_DEBUG_CRITICAL_P,
    E_BTL_STAT_DEBUG_NOBST_E,
    E_BTL_STAT_DEBUG_NOBST_P,
    E_BTL_STAT_DEBUG_BST100_E,
    E_BTL_STAT_DEBUG_BST100_P,
    E_BTL_STAT_DEBUG_AVOID_E,
    E_BTL_STAT_DEBUG_AVOID_P,
};

